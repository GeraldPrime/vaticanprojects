"""
Django settings for vaticanprojects project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import dj_database_url

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-n*u$))^+fr-s64f&&^lq$4&s6pp7_x2obf&*a@k*ry!7zz71mo'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = False

ALLOWED_HOSTS = [
    '.onrender.com', 
    'localhost',                  # Keep localhost for local dev
    '127.0.0.1',                  # Loopback address
    'vaticanprojects.com',
]

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'storages',  # Add this for Google Cloud Storage
    'estate',
    'django.contrib.humanize'
]

AUTH_USER_MODEL = 'estate.User'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # directly after SecurityMiddleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'vaticanprojects.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vaticanprojects.wsgi.application'

# Database
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL'),
        conn_max_age=600,
        ssl_require=True 
    )
}

# Google Cloud Storage Configuration
# Only import these when not in DEBUG mode or when GCS credentials exist
try:
    from google.oauth2 import service_account
    import json
    
    # Path to your JSON key file
    GCS_CREDENTIALS_PATH = os.path.join(BASE_DIR, 'credentials', 'gcs-service-account.json')
    
    # Check if credentials file exists
    if os.path.exists(GCS_CREDENTIALS_PATH):
        # Load credentials
        GS_CREDENTIALS = service_account.Credentials.from_service_account_file(
            GCS_CREDENTIALS_PATH
        )
        
        # Extract project ID from the JSON file
        with open(GCS_CREDENTIALS_PATH, 'r') as f:
            gcs_config = json.load(f)
            GS_PROJECT_ID = gcs_config['project_id']
            GS_BUCKET_NAME = gcs_config.get('bucket_name') or os.environ.get('GS_BUCKET_NAME')
    else:
        # Use environment variables (for production)
        GS_CREDENTIALS = None  # Will use GOOGLE_APPLICATION_CREDENTIALS env var
        GS_PROJECT_ID = os.environ.get('GS_PROJECT_ID')
        GS_BUCKET_NAME = os.environ.get('GS_BUCKET_NAME')
        
except ImportError:
    # django-storages not installed yet
    GS_CREDENTIALS = None
    GS_PROJECT_ID = None
    GS_BUCKET_NAME = None

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static and Media Files Configuration
# Replace your static and media configuration section with this:

# Static and Media Files Configuration
if DEBUG:
    # Local development - keep files local
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    STATICFILES_DIRS = [
        BASE_DIR / 'estate' / 'static',
    ]
else:
    # Production - use Google Cloud Storage
    if GS_BUCKET_NAME:
        # Use different storage backends for static and media
        DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
        
        # For static files, you might want to keep using WhiteNoise or a separate config
        # STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
        STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
        
        # GCS Settings
        GS_DEFAULT_ACL = 'publicRead'
        GS_FILE_OVERWRITE = False
        GS_MAX_MEMORY_SIZE = 1024 * 1024 * 5  # 5MB
        
        # Separate paths for media and static files
        GS_LOCATION = 'media'  # This creates a 'media' folder in your bucket
        
        # URLs
        MEDIA_URL = f'https://storage.googleapis.com/{GS_BUCKET_NAME}/media/'
        STATIC_URL = '/static/'  # Keep static files local with WhiteNoise
        STATIC_ROOT = os.path.join(BASE_DIR, 'static')
        
        STATICFILES_DIRS = [
            BASE_DIR / 'estate' / 'static',
        ]
# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication settings
LOGIN_URL = 'signin'
LOGOUT_REDIRECT_URL = 'signin'

# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'machovector3@gmail.com'           
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER                      
EMAIL_HOST_PASSWORD = 'ltks mykk ndie reoh'            
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True
EMAIL_PORT = 465
EMAIL_TIMEOUT = 30

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'django.log'),
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        '__main__': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}